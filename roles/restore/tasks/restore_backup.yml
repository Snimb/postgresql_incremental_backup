# Step 1: Ensure the selected full backup directory exists
- name: Ensure selected full backup directory exists
  ansible.builtin.stat:
    path: "{{ selected_full_backup }}"
  register: full_backup_stat

- name: Fail if selected full backup does not exist
  ansible.builtin.fail:
    msg: "The selected full backup directory {{ selected_full_backup }} does not exist."
  when: not full_backup_stat.stat.exists

# Step 2: Create temporary directory for extracted full backup
- name: Create temporary directory for extracted full backup
  ansible.builtin.tempfile:
    state: directory
    suffix: _full_restore
  register: temp_full_restore_dir

# Step 3: Extract the full backup
- name: Extract the full backup
  ansible.builtin.shell: |
    tar -xzf {{ selected_full_backup }}/base.tar.gz -C {{ temp_full_restore_dir.path }}
  register: extract_full_result

- name: Debug full backup extraction result
  ansible.builtin.debug:
    msg: "Full backup extraction result: {{ extract_full_result.stdout }}"

# Step 4: Ensure the selected incremental backups exist (if any)
- name: Ensure selected incremental backup directories exist
  ansible.builtin.stat:
    path: "{{ item }}"
  with_items: "{{ incremental_backup_list }}"
  register: incremental_backup_stats
  when: incremental_backup_list | length > 0

- name: Fail if any incremental backup does not exist
  ansible.builtin.fail:
    msg: "Incremental backup directory {{ item.item }} does not exist."
  with_items: "{{ incremental_backup_stats.results }}"
  when: not item.stat.exists

# Step 5: Create temporary directories for incremental backups
- name: Create temporary directories for incremental backups
  ansible.builtin.shell: |
    temp_dir=$(mktemp -d /tmp/incremental_restore_XXXX)
    tar -xzf {{ item }}/base.tar.gz -C $temp_dir
    echo $temp_dir
  loop: "{{ incremental_backup_list }}"
  register: extracted_incrementals
  when: incremental_backup_list | length > 0

# Step 6: Perform the pg_combinebackup to combine full and incremental backups
- name: Combine full and incremental backups using pg_combinebackup
  ansible.builtin.shell: |
    combined_restore_dir={{ pgbkup }}/restore_{{ lookup('pipe', 'date +%Y-%m-%d_%H-%M-%S') }}
    mkdir -p $combined_restore_dir
    pg_combinebackup -o $combined_restore_dir {{ temp_full_restore_dir.path }} {{ extracted_incrementals.results | map(attribute='stdout') | join(' ') }}
    cd $combined_restore_dir
    tar --exclude="backup_manifest" --exclude="base.tar.gz" -czf base.tar.gz .
    shopt -s extglob
    rm -rf !(base.tar.gz|backup_manifest)
  register: combine_backup_result

- name: Debug pg_combinebackup result
  ansible.builtin.debug:
    msg: "pg_combinebackup result: {{ combine_backup_result.stdout }}"

# Step 7: Clean up temporary directories after the restore
- name: Remove temporary directories for full and incremental restores
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ temp_full_restore_dir.path }}"
    - "{{ extracted_incrementals.results | map(attribute='stdout') | list }}"
  when: extracted_incrementals is defined
