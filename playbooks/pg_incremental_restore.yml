- name: PostgreSQL Incremental Restore
  hosts: backup_server
  become: yes
  become_user: "{{ pguser }}"
  tasks:
    # Step 1: Get available full backups
    - name: Get available full backups
      ansible.builtin.shell: |
        ls -td {{ pgbkup }}/full* 2>/dev/null
      register: available_full_backups

    - name: Fail if no full backups are found
      ansible.builtin.fail:
        msg: "No full backups found in the directory {{ pgbkup }}"
      when: available_full_backups.stdout_lines | length == 0

    - name: Debug available full backups
      ansible.builtin.debug:
        msg: "Available full backups: {{ available_full_backups.stdout_lines }}"

    # Step 2: Prompt user to select a full backup using pause
    - name: Prompt user to select a full backup
      ansible.builtin.pause:
        prompt: |
          Please enter the full backup directory you want to restore from the list below.
          Available full backups:
          {{ available_full_backups.stdout_lines }}
      register: full_backup_input

    - name: Clean selected full backup from user input
      ansible.builtin.set_fact:
        cleaned_full_backup: "{{ full_backup_input.user_input 
                                | regex_replace(\"'\", '') 
                                | regex_replace(' ', '') 
                                | regex_replace('\\[|\\]', '') 
                                | regex_replace('\\^', '') }}"
      when: full_backup_input.user_input | length > 0

    - name: Set selected full backup from user input
      ansible.builtin.set_fact:
        selected_full_backup: "{{ full_backup_input.user_input }}"

    # Step 3: Get available incremental backups for selected full backup
    - name: Get available incremental backups for selected full backup
      ansible.builtin.shell: |
        ls -trd {{ selected_full_backup }}/incremental_* 2>/dev/null
      register: available_incremental_backups

    - name: Debug available incremental backups
      ansible.builtin.debug:
        msg: "Available incremental backups: {{ available_incremental_backups.stdout_lines }}"

    # Step 4: Prompt user to select incremental backups if available
    - name: Prompt user to select incremental backups (comma-separated)
      ansible.builtin.pause:
        prompt: |
          Please enter the incremental backup directories to restore (comma-separated), or press Enter to skip.
          Available incremental backups:
          {{ available_incremental_backups.stdout_lines }}
      register: incremental_backups_input
      when: (available_incremental_backups.stdout_lines | length > 0)

    # Step 5: Set selected incremental backups and parse into a list if provided
    - name: Set fact for incremental backups from user input
      ansible.builtin.set_fact:
        selected_incremental_backups: "{{ incremental_backups_input.user_input | default('') }}"
      when: incremental_backups_input is defined

    - name: Debug user input before parsing
      ansible.builtin.debug:
        msg: "User input for incremental backups: {{ selected_incremental_backups }}"

    # Step 6: Clean user input for incremental backups
    - name: Clean user input for incremental backups
      ansible.builtin.set_fact:
        cleaned_incremental_backups: "{{ selected_incremental_backups 
                                        | regex_replace(\"'\", '') 
                                        | regex_replace(' ', '') 
                                        | regex_replace('\\[|\\]', '') 
                                        | regex_replace('\\^', '') }}"
      when: (selected_incremental_backups | length > 0)


    - name: Debug cleaned user input for incremental backups
      ansible.builtin.debug:
        msg: "Cleaned user input for incremental backups: {{ cleaned_incremental_backups }}"

    # Step 7: Convert cleaned input to string explicitly (defensive coding)
    - name: Convert cleaned incremental backups to string explicitly
      ansible.builtin.set_fact:
        cleaned_incremental_backups_str: "{{ cleaned_incremental_backups | string }}"
      when: cleaned_incremental_backups is defined and (cleaned_incremental_backups | length > 0)

    - name: Debug cleaned incremental backups string
      ansible.builtin.debug:
        msg: "Cleaned incremental backups as string: {{ cleaned_incremental_backups_str }}"

    # Step 8: Parse cleaned user input for incremental backups into a list
    - name: Parse cleaned user input for incremental backups into a list
      ansible.builtin.set_fact:
        incremental_backup_list: "{{ cleaned_incremental_backups_str.split(',') | map('trim') | list }}"
      when: (cleaned_incremental_backups_str | length > 0)

    # Step 9: Debug parsed incremental backups list
    - name: Debug parsed incremental backup list
      ansible.builtin.debug:
        msg: "Parsed incremental backup list: {{ incremental_backup_list }}"

    # Step 6: Restore the selected backup and incremental backups
    - name: Restore selected backup
      import_tasks: ../roles/restore/tasks/restore_backup.yml
      vars:
        selected_full_backup: "{{ selected_full_backup }}"
        incremental_backup_list: "{{ incremental_backup_list }}"

    - name: Perform Point-in-Time Recovery (PITR)
      import_tasks: ../roles/restore/tasks/pit_restore.yml
      when: pit_enabled is defined and pit_enabled
